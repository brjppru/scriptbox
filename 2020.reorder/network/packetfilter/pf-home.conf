# $RuOBSD: pf-home.conf,v 1.2 2009/02/03 23:16:14 form Exp $
#
# Пример настройки PF для простого маршрутизатора в домашней сети с реальным
# IP адресом, являющегося также почтовым сервером, сервером имен, WWW и FTP
# сервером, с трансляцией адресов и переадресацией некоторых TCP сервисов
# на внутренний сервер.
#
# В данном примере подразумевается, что скорость доступа в интернет 1Mbps,
# а скорость доступа к локальным ресурсам провайдера 100Mbps.
#
#   WAN              LAN
#    |      +-------------+---------
#    |      |             |
# +-sk0----dc0-+  +----------------+
# |            |  |  10.10.10.194  |
# +------------+  +----------------+
#
# Файлы:
#       /etc/mail/spamd.bypass
#               - список адресов/сетей которые требуется пропускать к
#                 почтовому серверу без проверки
#	/etc/pf.local
#		- список локальных сетей провайдера


# Сетевые интерфейсы.
#
ext_if		= "sk0"
int_if		= "dc0"

# Обслуживаемые TCP и UDP сервисы. В данный список не требуется
# включать tcp/smtp.
#
tcp_svc		= "ftp ssh domain www smtps imaps"
udp_svc		= "domain"

# TCP сервисы, обслуживаемые внутренним сервером.
#
rdr_tcp_svc	= "telnet"
rdr_tcp_hst	= "10.10.10.194"


# Таблицы белого и черного списков spamd и списка сетей, которые нужно
# пропускать к почтовому серверу без проверки.
#
table <spamd-white> persist
table <spamd-bypass> file "/etc/mail/spamd.bypass"

# Таблица локальных адресов с которых ведется активная рассылка.
#
table <spammers> persist

# Таблица черного списка (заполняется из sshwatchd или другой программы).
#
table <blocked> persist

# Таблица локальных сетей провайдера.
#
table <local> file "/etc/pf.local"

# Отключить фильтрацию трафика на loopback интерфейсе.
#
set skip on lo


# Выполнять нормализацию входящих пакетов.
#
scrub in


# Настройка очередей:
#  90 Mbit/s	- локальная сеть провайдера
# 900 Kbit/s	- обычный интернет трафик
# 100 Kbit/s	- высокоприоритетный трафик
#
altq on $ext_if bandwidth 100Mb hfsc queue { lan wan }
queue lan bandwidth 90% hfsc
queue wan bandwidth 1% hfsc { pri def }
queue pri bandwidth 10% priority 7 hfsc (realtime 10%)
queue def bandwidth 90% priority 5 hfsc (default)


# Транслировать внутренние адреса в (основной) адрес внешнего
# интерфейса.
#
nat on $ext_if from !($ext_if) -> ($ext_if:0)

# Подключить правила трансляции/переадресации, создаваемые
# ftp-proxy.
#
nat-anchor "ftp-proxy/*"
rdr-anchor "ftp-proxy/*"

# Не пропускать адреса из черного списка к переадресованным
# сервисам.
#
no rdr on $ext_if from <blocked>

# Пропустить FTP соединения через ftp-proxy кроме локальных
# соединений и сетей, доступных через тунели.
#
no rdr on $int_if inet proto tcp to <tunnel-networks> port ftp
rdr on $int_if inet proto tcp to !(self) port ftp -> 127.0.0.1 port 8021

# Перенаправить входящие SMTP сессии (для адресов, не входящих в белый
# список spamd) в spamd для проверки.
#
no rdr on $ext_if inet proto tcp from <spamd-bypass> to port smtp
rdr pass on $ext_if inet proto tcp from !<spamd-white> to ($ext_if) port smtp \
	-> 127.0.0.1 port spamd

# Переадресовать TCP сервисы, обслуживаемые внутренним сервером.
#
rdr pass on $ext_if inet proto tcp to ($ext_if) port { $rdr_tcp_svc } \
	-> $rdr_tcp_hst

# Разрешить обращение к переадресованным сервисам из внутренней сети.
#
rdr pass on $int_if inet proto tcp to ($ext_if) port { $rdr_tcp_svc } \
	tag INT_IF -> $rdr_tcp_hst
nat on $int_if tagged INT_IF -> ($int_if:0)


# Предотвращение IP spoofing. Принудительная блокировка адресов из
# черного списка.
#
antispoof quick for ($int_if)
block in quick on $ext_if to !($ext_if)
block in quick on $ext_if from <blocked>

# Подключить правила, создаваемые ftp-proxy.
#
anchor "ftp-proxy/*"

# По умолчанию блокировать и писать в лог любой трафик на внешнем
# интерфейсе, возвращая RST для входящих TCP соединений.
#
block log on $ext_if
block return-rst in log on $ext_if inet proto tcp

# Блокируем без записи в лог мусор (multicast, broadcast, netbios, ssdp).
#
block in quick on $ext_if inet to { 224/4 255.255.255.255 }
block in quick on $ext_if inet proto udp \
	to port { netbios-ns netbios-dgm ssdp }

# Разрешить исходящий трафик.
#
pass out quick on $ext_if inet from ($ext_if) to <local> queue lan
pass out quick on $ext_if inet proto udp to port { domain 4711 } queue pri
pass out quick on $ext_if inet proto tcp to port { telnet 5190 } queue pri
pass out quick on $ext_if inet user named queue pri
pass out quick on $ext_if inet proto tcp queue (def pri)
pass out on $ext_if inet

# Разрешить входящие ICMP ping пакеты. Остальные ICMP относятся к
# TCP/UDP и разрешаются их статами.
#
pass in quick on $ext_if inet proto icmp from <local> to ($ext_if) \
	icmp-type echoreq code 0 queue lan
pass in quick on $ext_if inet proto icmp to ($ext_if) icmp-type echoreq code 0

# Разрешить подключения к обслуживаемым TCP сервисам.
#
pass in on $ext_if inet proto tcp from <local> to ($ext_if) port { $tcp_svc } \
	queue lan
pass in on $ext_if inet proto tcp to ($ext_if) port { $tcp_svc } \
	queue (def pri)

# Разрешить SMTP сессии для адресов, прошедших проверку. Писать их в log
# для spamlogd.
#
pass in log on $ext_if inet proto tcp from <local> to ($ext_if) port smtp \
	queue lan
pass in log on $ext_if inet proto tcp to ($ext_if) port smtp queue (def pri)

# Разрешить входящие TCP соединения для FTP сервера (passive mode) и
# FTP клиента (active mode).
#
pass in on $ext_if inet proto tcp from <local> to ($ext_if) port > 49151 \
	user >= 0 queue lan
pass in on $ext_if inet proto tcp to ($ext_if) port > 49151 user >= 0 \
	queue (def pri)

# Разрешить обращение к обслуживаемым UDP сервисам.
#
pass in on $ext_if inet proto udp from <local> to ($ext_if) port { $udp_svc } \
	queue lan
pass in on $ext_if inet proto udp to ($ext_if) port { $udp_svc }

# Блокировать SMTP из локальной сети при обнаружении быстрой рассылки.
#
block in log quick on $int_if inet proto tcp from <spammers> to port smtp
pass in quick on $int_if inet proto tcp to port smtp \
	keep state (max-src-conn-rate 5/10 overload <spammers> flush)
