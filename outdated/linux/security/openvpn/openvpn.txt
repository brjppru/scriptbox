====== OpenVPN ======

В чом соль? Нашей задачей является добавление возможности подключать любого пользователя / офис из этих ваших интернетов к локальной сети ГО, делая его компьютер полноценным членом сети, т.е. L3 routed. Часто возникает необходимость организовать VPN-туннель находясь <del>в глубинной жопе</del> за NAT своего провайдера. Т.к. мы имеем в этих ваших интернетах сервер с реальным IP-адресом, то и будем использовать преимущества этого адреса. 

Ну не циски конечно, но работает.

===== Распределение сетей =====

Допустим, сеть 10.38.254 - будет транспортной. В этой сети живет P2P (точка-точка) роутинг. Роутинг распилен на /30 сетки. 

В чом соль? Пример: Есть сеть 10.38.0/24 <> 10.38.7/24, связанная через 10.38.254.1 <-> 10.38.254.2. Например комп 10.30.0.55 хочет комп 10.38.7.60.

Комп с адресом 10.38.0.50 -> идет на маршрутизатор 10.38.0.1 -> маршрутизатор 10.38.0.1 -> засовывает виртуально сетку 10.38.7/24 в openpnv -> отправляет сеть на роутед сеть 10.38.254.1 -> тут опенвпн (по верх физики соединений) <- принимает маршрутизатор 10.38.254.2 -> роутет в сеть 10.38.7.1 -> машрутизатор роутит на комп с адресом 10.38.7.60

Комп с адресом 10.38.7.60 -> идет на маршрутизатор 10.38.7.1 -> принимает маршрутизатор 10.38.254.2 -> тут опенвпн (по верх физики соединений) -> засовывает сетку обратно в роутинг (за счет пусш с сервера) <- принимает маршрутизатор 10.38.254.1 -> раскукожывает роуту 10.38.7/24 из openvpn -> отправляет сеть на роутед сеть --> 10.38.0/24 -> роутит на комп с адресом 10.38.0.50

Щастье?

=== Сертификаты ===

Вот это все делается один раз.

<code bash>
cp -av /usr/local/share/doc/openvpn/easy-rsa/2.0/ /usr/local/etc/openvpn/easy-rsa 
mkdir -p /usr/local/etc/openvpn/{ccd,easy-rsa/keys}
ln -sf /usr/local/etc/openvpn/easy-rsa/keys /usr/local/etc/openvpn/keys
cd /usr/local/etc/openvpn/easy-rsa/
bash
. ./vars
./clean-all
./build-ca
./build-dh
./build-key-server krsv00
./build-key client00
</code>

Создание сертификатов процедура облегченная использованием пакета easy-rsa поставляемая так же в дистрибутиве openvpn. Вот набор простых команд необходимых для сознания необходимого количества сертификатов:

<code bash>
# build ta.key
openvpn --genkey --secret ta.key

cd /usr/share/openvpn/easy-rsa/2.0/

# build certificate authority (root cert)
. ./vars
./clean-all
./build-ca

# build server side certificate
./build-key-server server

# create client certs, change clientX name to you prefer
./build-key client1
./build-key client2
./build-key client3

# create dh1024.key
./build-dh
</code>

Создание клиента

<code bash>
bash
cd /usr/local/etc/openvpn/easy-rsa/
. ./vars
./build-key client10
</code>

===== Конфиг сервера ======

На сервере генеряца ключи для клиента. Транспортная подсеть записывается в конфиг openvpn.conf, командой route. Это нужно что бы когда транспортное (физика) пришла на сервер, openvpn принял в себя эту сеть, а потом засунул в конфиг согласно CDD ключа.

<code bash>
#
# brj@krsv00 openvpn server.conf, http://brj.pp.ru/
#

mode server
daemon
port 6789
proto tcp-server
dev tun0
keepalive 10 120
client-to-client
comp-lzo
persist-key
persist-tun
verb 3
log-append /var/log/openvpn/openvpn.log
status /var/log/openvpn/status.log

# transport net
server 10.38.254.0 255.255.255.0

# internal route from l3 -> userland
route 10.38.3.0 255.255.255.0
route 10.38.7.0 255.255.255.0
route 10.38.11.0 255.255.255.0

# keys
ca /usr/local/etc/openvpn/keys/ca.crt
cert /usr/local/etc/openvpn/keys/krsv00.crt
key /usr/local/etc/openvpn/keys/krsv00.key
dh /usr/local/etc/openvpn/keys/dh1024.pem
client-config-dir /usr/local/etc/openvpn/ccd
</code>

Конфиг cdd, создается согласно имени ключа. Сюда записываются транспортная сетка. Первый ипишник ифконфига - уходит на клиента. Поэтому адрес старший. Та самая сетка которую опенвпн приземляет, когда в него засовывают его роутом (см. выше) пишется командой irouite. Плюс приземляются всякие разные сети для роутинга l3 + ната.

<code bash>
#
# network 10.38.7/24
#

# Interface
ifconfig-push 10.38.254.2 10.38.254.1

# Internal route
iroute 10.38.7.0 255.255.255.0

# Network
push "route 10.38.0.0 255.255.255.0"
push "route 192.168.2.0 255.255.255.0"

# 1gb.ru AS for mail
#push "route 81.176.0.0 255.254.0.0"
</code>

===== Конфиг клиента ======

Для клиента с сервера берется ca.crt, имя.crt, имя.key.

Все настройки роутинга производятся с сервера.

Если требуется перенаправлять default gateway на vpn-сервер, то

<code bash>
push "redirect-gateway def1"
push "route-gateway 10.10.0.1"
</code>

<code bash>
#
# brj@client10 openvpn server.conf, http://brj.pp.ru/
#

dev tun
proto tcp
client
remote 10.20.30.40
port 6789
nobind

persist-key
persist-tun

ca /usr/local/etc/openvpn/keys/ca.crt
cert /usr/local/etc/openvpn/keys/clinet10.crt
key /usr/local/etc/openvpn/keys/client10.key

keepalive 10 120
comp-lzo
verb 3
log-append /var/log/openvpn/openvpn.log
status /var/log/openvpn/status.log
</code>

===== адресная сеть =====

Старший на сервер, младший у клиента.

^ Сеть ^ Сервер ^ Клиент ^ 
| 10.38.254.0/30         | 10.38.254.1   | 10.38.254.2 | 
| 10.38.254.4/30         | 10.38.254.5   | 10.38.254.6 | 
| 10.38.254.8/30         | 10.38.254.9   | 10.38.254.10 | 
| 10.38.254.12/30        | 10.38.254.13  | 10.38.254.14 | 
| 10.38.254.16/30        | 10.38.254.17  | 10.38.254.18 |
| 10.38.254.20/30        | 10.38.254.21  | 10.38.254.22 |
| 10.38.254.24/30        | 10.38.254.25  | 10.38.254.26 |
| 10.38.254.28/30        | 10.38.254.29  | 10.38.254.30 |
| 10.38.254.32/30        | 10.38.254.33  | 10.38.254.34 |
| 10.38.254.36/30        | 10.38.254.37  | 10.38.254.38 |
| 10.38.254.40/30        | 10.38.254.41  | 10.38.254.42 |
| 10.38.254.44/30        | 10.38.254.45  | 10.38.254.46 |
| 10.38.254.48/30        | 10.38.254.49  | 10.38.254.50 |
| 10.38.254.52/30        | 10.38.254.53  | 10.38.254.54 |
| 10.38.254.56/30        | 10.38.254.57  | 10.38.254.58 |
| 10.38.254.60/30        | 10.38.254.61  | 10.38.254.62 |
| 10.38.254.64/30        | 10.38.254.65  | 10.38.254.66 |
| 10.38.254.68/30        | 10.38.254.69  | 10.38.254.70 |
| 10.38.254.72/30        | 10.38.254.73  | 10.38.254.74 |
| 10.38.254.76/30        | 10.38.254.77  | 10.38.254.78 |
| 10.38.254.80/30        | 10.38.254.81  | 10.38.254.82 |
| 10.38.254.84/30        | 10.38.254.85  | 10.38.254.86 |
| 10.38.254.88/30        | 10.38.254.89  | 10.38.254.90 |
| 10.38.254.92/30        | 10.38.254.93  | 10.38.254.94 |
| 10.38.254.96/30        | 10.38.254.97  | 10.38.254.98 |
| 10.38.254.100/30       | 10.38.254.101         | 10.38.254.102 |
| 10.38.254.104/30       | 10.38.254.105         | 10.38.254.106 |
| 10.38.254.108/30       | 10.38.254.109         | 10.38.254.110 |
| 10.38.254.112/30       | 10.38.254.113         | 10.38.254.114 |
| 10.38.254.116/30       | 10.38.254.117         | 10.38.254.118 |
| 10.38.254.120/30       | 10.38.254.121         | 10.38.254.122 |
| 10.38.254.124/30       | 10.38.254.125         | 10.38.254.126 |
| 10.38.254.128/30       | 10.38.254.129         | 10.38.254.130 |
| 10.38.254.132/30       | 10.38.254.133         | 10.38.254.134 |
| 10.38.254.136/30       | 10.38.254.137         | 10.38.254.138 |
| 10.38.254.140/30       | 10.38.254.141         | 10.38.254.142 |
| 10.38.254.144/30       | 10.38.254.145         | 10.38.254.146 |
| 10.38.254.148/30       | 10.38.254.149         | 10.38.254.150 |
| 10.38.254.152/30       | 10.38.254.153         | 10.38.254.154 |
| 10.38.254.156/30       | 10.38.254.157         | 10.38.254.158 |
| 10.38.254.160/30       | 10.38.254.161         | 10.38.254.162 |
| 10.38.254.164/30       | 10.38.254.165         | 10.38.254.166 |
| 10.38.254.168/30       | 10.38.254.169         | 10.38.254.170 |
| 10.38.254.172/30       | 10.38.254.173         | 10.38.254.174 |
| 10.38.254.176/30       | 10.38.254.177         | 10.38.254.178 |
| 10.38.254.180/30       | 10.38.254.181         | 10.38.254.182 |
| 10.38.254.184/30       | 10.38.254.185         | 10.38.254.186 |
| 10.38.254.188/30       | 10.38.254.189         | 10.38.254.190 |
| 10.38.254.192/30       | 10.38.254.193         | 10.38.254.194 |
| 10.38.254.196/30       | 10.38.254.197         | 10.38.254.198 |
| 10.38.254.200/30       | 10.38.254.201         | 10.38.254.202 |
| 10.38.254.204/30       | 10.38.254.205         | 10.38.254.206 |
| 10.38.254.208/30       | 10.38.254.209         | 10.38.254.210 |
| 10.38.254.212/30       | 10.38.254.213         | 10.38.254.214 |
| 10.38.254.216/30       | 10.38.254.217         | 10.38.254.218 |
| 10.38.254.220/30       | 10.38.254.221         | 10.38.254.222 |
| 10.38.254.224/30       | 10.38.254.225         | 10.38.254.226 |
| 10.38.254.228/30       | 10.38.254.229         | 10.38.254.230 |
| 10.38.254.232/30       | 10.38.254.233         | 10.38.254.234 |
| 10.38.254.236/30       | 10.38.254.237         | 10.38.254.238 |
| 10.38.254.240/30       | 10.38.254.241         | 10.38.254.242 |
| 10.38.254.244/30       | 10.38.254.245         | 10.38.254.246 |
| 10.38.254.248/30       | 10.38.254.249         | 10.38.254.250 |
| 10.38.254.252/30       | 10.38.254.253         | 10.38.254.254 |

== Скрипт ==

Cписок сгенерировать можно с помощью вот этого скрипта на perl:

<code perl>
#!/usr/bin/perl

# Первые три октета сети
my $net = shift || "10.38.254";

# Счётчик
my $i = 0;
while ($i < 255) {
    # Считаем адрес сервера
    $s = $i + 1;
    # Считаем адрес клиента
    $c = $i + 2;
    # Отображаем результат
    print "| $net.$i/30\t | $net.$s\t | $net.$c |\n";
    # Увеличиваем значение счётчика
    $i += 4;
}
</code>

==== ссылки ====

  - Описашки командов: http://tuxnotes.ru/articles.php?a_id=26
  - http://tuxnotes.ru/articles.php?a_id=18
  - http://www.ylsoftware.com/news/print/545